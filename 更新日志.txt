//11.18 开始项目，添加一些基本的注释


//11.28	基本完成了连续吃子的功能,已经实现了走出合法棋子。
//		已经删掉11.18的注释
//		开始着手估值函数的设计
//		增加了普通和王的初始化估值，每个普通子力+20分，每个王+50分
//		本版本的估值函数只和子力多少有关。
//		先用贪心算法。


//11.29	增加了撤回上一步command功能，并在调试时也可以用
//		基本实现了ab剪枝极大极小值搜索


//11.30	发现了可能走到无效子位的bug
//		通过标记可能变化的值来记录出错的函数位置
//		希望今天能用上位棋盘


//12.2	还没用上位棋盘呜呜呜
//		在ab剪枝中取消了用撤回操作来保留棋盘（原因：无法保留王棋）
//		改用了存储临时棋盘来储存当前棋局，在回去之后即变为刚刚的临时棋盘。
//		发现在有些时候会出bug：打印棋盘时第0排总是断断续续，一段时间之后又恢复正常
//		希望多看几篇关于算法的文章，找点设计估值函数的感觉
//		可以引入整个棋局的黑色白色子力对比，以此来减少搜索整个棋局黑白子的复杂度。
//		增加了初始化局势可吃数组的功能，方便深入进行极大极小值搜索。
//		决定抛弃助教的模板


//12.3	增加了numRemaining数组，以记录剩余子力个数
//		修改了估值函数
//		第一层估值函数就不用搜索了
//		开局第二步会送子给对手bug
//		更新了numRemaining中记载王棋的数量
//		今日困惑:如何生成足够随机的数？
//		亟待采用随机方法搜索
//		搜索中若两个估值相同则应再估值一次。
//		修复了curTurn的逻辑bug
//		王棋会在0,1和1,0之间徘徊。
//		可以写一个爬虫复盘棋局


//12.6	需要加一个debug功能
//		需要加一个判断对手落棋时间的方法以改变进攻/防卫/吃子权重
//		对于王棋在爬的情况需要改善
//		不一定只5层


//12.7	11层效果尚可。
//		吃子仍有错误，回去改bug
//		目前9层效果最好，不明为什么
//		对于可吃的子力也需要深搜！
//		用足够高的defendweight战平了sober
//		需要改进估值函数了，子力前后和左右的进攻极不平衡

//12.11	多次调参后发现9层仍是最好效果。
//		经常送子给对面吃。
//		有时不知走边路进攻底线而会在0,1 1,0处徘徊
//		程序已经基本没有bug了
//		目前最好效果：#define ATTACKWEIGHT 3
//					 #define DEFENDWEIGHT 9
// 					 #define EATWEIGHT 3
//					 #define DIFFERWEIGHT 5

//12.12	开始着手解决1,0 0,1徘徊的问题
//		需要加入随机数 随机剪枝
//		对于危险棋子优先剪枝。

//12.17	还是要用最简单的估值，别的估值效果并不好
//		需要对棋局最后几步加大估值的权重
//		从一开始就应该使用裸估，而不要考虑EATWEIGHT之类的奇技淫巧
//		还是11层效果最最好！！！！！！！
//		要用allPossibility来控制搜索层数
//		终局判断不够完善

//12.18	差不多该交最终版本了，增添了SAFESCORE
//		可能还是有bug 但是不太想找了。
//		13层效果比11层好一些

//12.19	加入了随机数列优化搜索